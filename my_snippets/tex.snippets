global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x, y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and x != '0'

endglobal

# ==========Preamble==========
# Packages
snippet template "template packages and settings"
\documentclass[12pt]{article}
\usepackage[letterpaper]{geometry}
\usepackage[doublespacing]{setspace}
\usepackage[utf8]{inputenc}
endsnippet

snippet math "math packages"
\usepackage{amssymb, amsmath, amsthm}
endsnippet

snippet visual "figure packages"
\usepackage{graphicx}
\usepackage{subcaption}
\usepackage{rotating}
\usepackage{tikz}
endsnippet

#(old option) \\usepackage{tikz-qtree-compat}
snippet ling "linguistics packages"
\usepackage{tipa}
\usepackage{phonrule}
\usepackage{syntax}
\usepackage{expex}
\usepackage[linguistics]{forest}
\forestset{nice nodes/.style={for tree={inner sep=0}}, default preamble=nice nodes}
endsnippet

# Title heading
snippet header "title heading"
\title{${1:Title}}
\author{Josh Broderick Phillips}
\date{Due: `!v strftime("%B %d, %Y")`${0}}
endsnippet

# ==========MATH==========
snippet begin "begin/end environment" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet ba* "unnumbered align environment" bA
\begin{align*}
	\label{eq:${1}}
	$0
\end{align*}
endsnippet

snippet mk "Inline math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Display math" wA
\[
$1
.\]$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript 2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet mat "Generate matrix"
\begin{${1:p/b/v/V/B/small}matrix}
	$0
\end{$1matrix}
endsnippet

context "math()"
snippet // "fraction" iA
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "create fraction" wrA
\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet / "create fraction from existing" i
\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet ddt "time derivative" wA
\frac{d}{dt}$0
endsnippet

context "math()"
snippet lim "limit" wA
\lim_{${1:n \to \infty}} $0
endsnippet

context "math()"
snippet ooo "infinity" iA
\infty$0
endsnippet

context "math()"
snippet pdv "partial derivative" wA
\frac{\partial $1}{\partial $2}$0
endsnippet

context "math()"
snippet ppdv "second partial derivative" wA
\frac{\partial^2 $1}{\partial $2 \partial $3}$0
endsnippet

context "math()"
snippet dv "derivative" wA
\frac{d$1}{d$2}$0
endsnippet

context "math()"
snippet sum "summation" wA
\sum_{${1:n = 1}}^{${2:\infty}} $0
endsnippet

priority 10
context "math()"
snippet dot "time derivative" wA
\dot{$1}$0
endsnippet

priority 100
context "math()"
snippet "([A-CE-Za-ce-z])dot" "time derivative" riA
\dot{`!p snip.rv = match.group(1)`}
endsnippet

priority 10
context "math()"
snippet ddot "second order time derivative" wA
\ddot{$1}$0
endsnippet

priority 100
context "math()"
snippet "([A-Za-z])ddot" "second order time derivative" iA
\ddot{$1}$0
endsnippet

context "math()"
snippet sq "squared" iA
^2
endsnippet

context "math()"
snippet cb "cubed" iA
^3
endsnippet

context "math()"
snippet pow "superscript" iA
^{$1}$0
endsnippet

priority 10
context "math()"
snippet vec "vector" iA
\vec{$1}$0
endsnippet

priority 100
context "math()"
snippet "(\\?\w+)vec" "vector" riA
\vec{`!p snip.rv = match.group(1)`}
endsnippet

priority 10
context "math()"
snippet bar "bar" iA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([A-Za-z])bar" "bar" riA
\overline{`!p snip.rv = match.group(1)`}
endsnippet

priority 10
context "math()"
snippet hat "hat" iA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([A-Za-z])hat" "hat" riA
\hat{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet xx "cross product" wA
\times$0
endsnippet

context "math()"
snippet . "dot product" wA
\cdot$0
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet int "integral" iA
\int_{${1:0}}^{${2:\infty}} $3 \: d$0
endsnippet

snippet ra "rightarrow"
\rightarrow $0
endsnippet

snippet lra "longrightarrow"
\longrightarrow $0
endsnippet

context "math()"
snippet == "equals" iA
&=$1 \\\\$0
endsnippet

context "math()"
snippet != "equals" iA
\neq
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

# ==========Linguistics==========
# Syntax trees
snippet tree "qtree"
\Tree[.${1: Root node} [.${2} ][.${0} ] ]
endsnippet

snippet ttree "tikz trees"
\begin{tikzpicture}
	\tikzset{every tree node/.style{align=center,anchor=north}}
	${0}
\end{tikzpicture}
endsnippet

snippet node "qtree branch"
[.${1} ]${0}
endsnippet

snippet xp "generic constituent"
[${1:X}P
	[${2:Spec $1P}]
	[$1$^\prime$
		[$1$^0$ [${3}]]
		xp${0}
	]
]
endsnippet

snippet yp "generic adjunct"
[${1:Y}P
	[$1P
		[${2:Spec $1P}]
		[$1$^\prime$
			[$1$^0$ [${3}]]
			xp${0}
		]
	]
	xp
]
endsnippet

snippet draw "trace arrows"
\draw[->] (${1:source}) to[out=${3}, in=${4}] (${2:target});
endsnippet

# Linguistics examples
snippet expex "expex examples"
\ex[exno=${1}]
\begingl
\gla ${2} //
\glb ${3} //
\glft ${4} //
\endgl
\xe
endsnippet

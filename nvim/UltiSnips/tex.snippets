priority 1

global !p

def create_matrix(snip):

	matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()

	rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
	cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{"+matrix_str+"}\n"
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

	snip.expand_anon(final_str)

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x, y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

endglobal

# ==========General==========
snippet begin "begin/end environment" bA
\begin{$1}
	${VISUAL}$0
\end{$1}
endsnippet

snippet bf "bold" w
\textbf{${VISUAL}$1}$0
endsnippet

snippet it "italics" w
\textit{${VISUAL}$1}$0
endsnippet

snippet und "underline" w
\underline{${VISUAL}$1}$0
endsnippet

# ==========Preamble==========
# Packages
snippet up "use package" w
\usepackage{$1}$0
endsnippet

snippet template "template packages and settings"
\documentclass[12pt]{article}
\usepackage[letterpaper]{geometry}
\usepackage[doublespacing]{setspace}
\usepackage[utf8]{inputenc}

\title{${1:Title}}
\author{Josh Broderick Phillips}
\date{Due: `!v strftime("%B")` ${2:`!v strftime("%d")`}, `!v strftime("%Y")`}

\begin{document}

\maketitle

${0}
\end{document}
endsnippet

snippet math "math packages"
\usepackage{amssymb, amsmath, amsthm}
endsnippet

snippet visual "figure packages"
\usepackage{graphicx}
\usepackage{subcaption}
\usepackage{rotating}
\usepackage{tikz}
\usepackage{pdfpages}
endsnippet

#(old option) \\usepackage{tikz-qtree-compat}
snippet ling "linguistics packages"
\usepackage{tipa}
\usepackage{phonrule}
\usepackage{syntax}
\usepackage{expex}
\usepackage[linguistics]{forest}
\forestset{nice nodes/.style={for tree={inner sep=0}}, default preamble=nice nodes}

\lingset{numoffset=\parindent}
\excnt=100
endsnippet

# Title heading
snippet header "title heading"
\title{${1:Title}}
\author{Josh Broderick Phillips}
\date{Due: `!v strftime("%B")` ${2:`!v strftime("%d")`}, `!v strftime("%Y")`}${0}
endsnippet

# ==========MATH==========
snippet ba* "unnumbered align environment" bA
\begin{align*}
	\label{eq:${1}}
	$0
\end{align*}
endsnippet

snippet mk "Inline math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Display math" wA
\[
$1
\]$0
endsnippet

context "math()"
snippet txt "text" wA
\text{${VISUAL}$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript 2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

priority 10
context "math()"
pre_expand "create_matrix(snip)"
snippet "(small|[bBpvV])?mat(rix)?\_(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" brA
endsnippet

context "math()"
snippet mat "Generate matrix"
\begin{${1:p/b/v/V/B/small}matrix}
	$0
\end{$1matrix}
endsnippet

context "math()"
snippet // "fraction" iA
\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "create fraction" wrA
\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet frac "create fraction from existing" iA
\frac{${VISUAL}}{$2}$0
endsnippet

context "math()"
snippet denom "denominator of fraction" iA
\frac{${1:1}}{${VISUAL}}$0
endsnippet

context "math()"
snippet sqrt "square root" iA
\sqrt{${VISUAL}$1}$0
endsnippet

context "math()"
snippet root "nth root" iA
\sqrt[$1]{${VISUAL}$2}$0
endsnippet

context "math()"
snippet ddt "time derivative" wA
\frac{d}{dt}$0
endsnippet

context "math()"
snippet lim "limit" wA
\lim_{${1:n \to \infty}} $0
endsnippet

context "math()"
snippet ooo "infinity" iA
\infty$0
endsnippet

context "math()"
snippet dv "derivative" wA
\frac{d${VISUAL}$1}{d$2}$0
endsnippet

context "math()"
snippet pdv "partial derivative" wA
\frac{\partial ${VISUAL}$1}{\partial $2}$0
endsnippet

context "math()"
snippet ppdv "second partial derivative" wA
\frac{\partial^2 ${VISUAL}$1}{\partial $2 \partial $3}$0
endsnippet

context "math()"
snippet grad "gradient" wA
\nabla$0
endsnippet

context "math()"
snippet div "divergence" wA
\nabla \cdot ${VISUAL:f}
endsnippet

context "math()"
snippet curl "curl" wA
\nabla \times ${VISUAL:f}
endsnippet

context "math()"
snippet sum "summation" wA
\sum_{${1:n = 1}}^{${2:\infty}} $0
endsnippet

context "math()"
snippet prod "product" wA
\prod_{${1:n = 1}}^{${2:\infty}} $0
endsnippet

priority 10
context "math()"
snippet dot "time derivative" wA
\dot{$1}$0
endsnippet

priority 100
context "math()"
snippet "([A-Za-z])dot" "time derivative" riA
\dot{`!p snip.rv = match.group(1)`}
endsnippet

priority 101
context "math()"
snippet ddot "second order time derivative" wA
\ddot{$1}$0
endsnippet

priority 200
context "math()"
snippet "([A-Za-z])ddot" "second order time derivative" riA
\ddot{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet sr "squared" iA
^2
endsnippet

context "math()"
snippet cb "cubed" iA
^3
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet sub "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

priority 100
context "math()"
snippet '(?<!(\\|[a-zA-Z]))(sin|arcsin|cos|arccos|tan|arctan|csc|arccsc|sec|arcsec|cot|arccot|ln|log|exp|star|perp|argmax|argmin)' "functions" rwA
\\`!p snip.rv = match.group(2)`
endsnippet

priority 100
context "math()"
snippet '(?<!(\\|[a-zA-Z]))(pi|tau|lambda|phi|psi|epsilon|delta|rho|sigma|alpha|beta|gamma|theta|eta|in|exists|forall)' "symbols" rwA
\\`!p snip.rv = match.group(2)`
endsnippet

priority 10
context "math()"
snippet vec "vector" iA
\vec{$1}$0
endsnippet

priority 100
context "math()"
snippet "(\\?\w+)vec" "vector" riA
\vec{`!p snip.rv = match.group(1)`}
endsnippet

priority 10
context "math()"
snippet bar "bar" iA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([A-Za-z])bar" "bar" riA
\overline{`!p snip.rv = match.group(1)`}
endsnippet

priority 10
context "math()"
snippet hat "hat" iA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([A-Za-z])hat" "hat" riA
\hat{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet xx "cross product" wA
\times$0
endsnippet

context "math()"
snippet * "dot product" A
\cdot$0
endsnippet

context "math()"
snippet ... "ellipsis" wA
\ldots$0
endsnippet

context "math()"
snippet |. "vertical dots" wA
\vdots$0
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet int "integral" iA
\int_{${1:0}}^{${2:\infty}} $3 \: d$0
endsnippet

snippet ra "rightarrow"
\rightarrow $0
endsnippet

snippet lra "longrightarrow"
\longrightarrow $0
endsnippet

snippet la "leftarrow"
\leftarrow $0
endsnippet

context "math()"
snippet == "equals" iA
&=$1 \\\\$0
endsnippet

context "math()"
snippet != "equals" iA
\neq
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

# ==========Linguistics==========
# Syntax trees
snippet qtree "qtree"
\Tree[.${1: Root node} [.${2} ][.${0} ] ]
endsnippet

snippet ttree "tikz trees"
\begin{tikzpicture}
	\tikzset{every tree node/.style{align=center,anchor=north}}
	${0}
\end{tikzpicture}
endsnippet

snippet node "qtree branch"
[.${1} ]${0}
endsnippet

snippet tree "tree example" b
\ex[tag=tree:$1$2]
${1:D/S}-Structure for sentence (${2})
\xe
\begin{forest}
for tree = {s sep = 1cm},
$0
\end{forest}
endsnippet

snippet "([a-z]+)ref" "expex example reference" rw
\getref{`!p snip.rv = match.group(1)`:$1}$0
endsnippet

context "env('forest')"
snippet xp "generic constituent" wA
[${1:X}P
	[${2:Spec $1P}]
	[$1$^\prime$
		[$1$^\circ$
			[$3]
		]
		$0
	]
]
endsnippet

context "env('forest')"
snippet yp "generic adjunct" wA
[${1:Y}P
	[$1P
		[${2:Spec $1P}]
		[$1$^\prime$
			[$1$^\circ$
				[$3]
			]
			$0
		]
	]
	xp
]
endsnippet

context "env('forest')"
snippet draw "trace arrows"
\draw[->] (${1:source}) to[out=${3}, in=${4}] (${2:target});
endsnippet

context "env('forest')"
snippet agr "Verb conjugation/agreement" i
\\\\ \text{[${1:Bare}]}$0
endsnippet

context "env('forest')"
snippet tense "Tense agreement (finite)" i
\\\\ $\begin{bmatrix} \text{Fin} \\\\ \text{${1:3SgPres}} \end{bmatrix}$$0
endsnippet

# Linguistics examples
snippet gloss "gloss examples"
\ex[exno=${1}]
\begingl
\gla ${2} //
\glb ${3} //
\glft ${4} //
\endgl
\xe
endsnippet

global !p

def make_collection(list_type, snip):
	words = str(snip.v.text.split())

	if list_type == "tuple":
		words = "(" + words[1:-1] + ")"
	elif list_type == "set":
		words = "{" + words[1:-1] + "}"

	snip.rv = words

endglobal

snippet list "create a list from selected text"
`!p make_collection("list", snip)`
endsnippet

snippet tuple "create a tuple from selected text"
`!p make_collection("tuple", snip)`
endsnippet

snippet set "create a set from selected text"
`!p make_collection("set", snip)`
endsnippet

snippet np "numpy" b
import numpy as np
endsnippet

snippet plt "pyplot" b
import matplotlib.pyplot as plt
endsnippet

snippet pd "pandas" b
import pandas as pd
endsnippet

snippet witho "with open" b
with open("${1:filename}", '${2:r}', encoding='utf8') as f:
	${3:${VISUAL:pass}}
endsnippet

snippet withop "with open for Path objects" b
with ${1:path}.open('${2:r}', encoding='utf8') as f:
	${3:${VISUAL:pass}}
endsnippet

snippet path "pathlib" b
from pathlib import Path
endsnippet

snippet args "argparse command line arguments" bm
import argparse

parser = argparse.ArgumentParser(
	formatter_class=argparse.ArgumentDefaultsHelpFormatter,
	description=__doc__
)

parser.add_argument(
	'${1:name}',
	type=${2:str},
	help="${3:Help string}"
)$4

args = parser.parse_args()

main(args.`!p snip.rv = t[1].lstrip("-")`$5)
endsnippet

snippet arg "argparse argument" b
parser.add_argument(
	'${1:name}',
	type=${2:str},
	help="${3:Help string}"
)
endsnippet
